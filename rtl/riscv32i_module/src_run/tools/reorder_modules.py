#!/usr/bin/env python3
import glob, os, sys, shutil, tempfile
from collections import defaultdict, deque
from pyverilog.vparser.parser import parse
from pyverilog.vparser.ast import ModuleDef, InstanceList

HDR = os.environ.get("HDR", "params.vh")   # path to header; override via HDR=path
EXCLUDE_SUFFIX = "TB.v"

# 1) read header text (required)
if not os.path.isfile(HDR):
    sys.exit(f"Header not found: {HDR}. Set HDR=/path/to/params.vh")
hdr_txt = open(HDR, "r", errors="ignore").read()

# 2) collect RTL
srcs = [f for f in glob.glob("*.v") if not f.endswith(EXCLUDE_SUFFIX)]
if not srcs:
    sys.exit("No RTL .v files found.")

# 3) build temp copies with header injected if not already included
tmpdir = tempfile.mkdtemp(prefix="pv_")
tmp_srcs = []
for f in srcs:
    s = open(f, "r", errors="ignore").read()
    if '`include "params.vh"' in s or f.endswith(".vh"):
        t = s  # already includes
    else:
        t = hdr_txt + "\n" + s
    out = os.path.join(tmpdir, os.path.basename(f))
    open(out, "w").write(t)
    tmp_srcs.append(out)

# 4) parse without relying on include paths
ast, _ = parse(tmp_srcs, preprocess_include=[], preprocess_define=[])

# 5) collect modules and deps
mods, deps = {}, defaultdict(set)
for d in ast.description.definitions:
    if isinstance(d, ModuleDef):
        mods[d.name] = d
        for it in (d.items or []):
            if isinstance(it, InstanceList):
                deps[d.name].add(it.module)
for m in list(deps):
    deps[m] = {x for x in deps[m] if x in mods}

# 6) topo order (leaves â†’ top)
indeg = {m: 0 for m in mods}
for m, xs in deps.items():
    for x in xs:
        indeg[x] += 1
order = [m for m, v in indeg.items() if v == 0]
i = 0
while i < len(order):
    u = order[i]; i += 1
    for v, xs in deps.items():
        if u in xs:
            indeg[v] -= 1
            if indeg[v] == 0:
                order.append(v)
if len(order) != len(mods):
    order = list(mods.keys())

# 7) extract original module text from real files
def grab(mod):
    tok, end = f"module {mod}", "endmodule"
    for f in srcs:
        s = open(f, "r", errors="ignore").read()
        i = s.find(tok)
        if i >= 0:
            j = s.find(end, i)
            if j >= 0:
                return s[i:j+len(end)] + "\n\n"
    return f"// WARN: {mod} not found in originals\n\n"

out = []
# keep original `include lines once at top
seen = set()
for f in srcs:
    for line in open(f, "r", errors="ignore"):
        ls = line.lstrip()
        if ls.startswith("`include") and line not in seen:
            out.append(line); seen.add(line)
out.append("\n// combined.v generated by reorder_modules.py\n\n")
for m in order:
    out.append(grab(m))
open("combined.v", "w").writelines(out)

# 8) cleanup temp
shutil.rmtree(tmpdir, ignore_errors=True)
print("Wrote combined.v")
