
// // Opcode Decoding Type
// localparam [6:0] R_Type         =   7'b0110011; //0110011
// localparam [6:0] I_Type_A       =   7'b0010011; // 0010011
// localparam [6:0] I_Type_L       =   7'b0000011;
// localparam [6:0] S_Type         =   7'b0100011;
// localparam [6:0] B_Type         =   7'b1100011;
// localparam [6:0] J_Type_lk      =   7'b1101111;
// localparam [6:0] I_Type_lr      =   7'b1100111;
// localparam [6:0] U_Type_lui     =   7'b0110111;
// localparam [6:0] U_Type_auipc   =   7'b0010111;
// localparam [6:0] I_Type_ECALL   =   7'b1110011;
// localparam [31:0] NOOP        =   32'h00000013;
// // Encoding Type
// localparam [6:0] INST_typ_R =   7'b0000001;
// localparam [6:0] INST_typ_I =   7'b0000010;
// localparam [6:0] INST_typ_S =   7'b0000100;
// localparam [6:0] INST_typ_B =   7'b0001000;
// localparam [6:0] INST_typ_J =   7'b0010000;
// localparam [6:0] UNRECGONIZED=  7'b0000000;

// // Instructions
// localparam [63:0] inst_ADD   = 0x0000_0000_0000_0001;
// localparam [63:0] inst_SUB   = 0x0000_0000_0000_0002;
// localparam [63:0] inst_XOR   = 0x0000_0000_0000_0004;
// localparam [63:0] inst_OR    = 0x0000_0000_0000_0008;

// localparam [63:0] inst_AND   = 0x0000_0000_0000_0010;
// localparam [63:0] inst_SLL   = 0x0000_0000_0000_0020;
// localparam [63:0] inst_SRL   = 0x0000_0000_0000_0040;
// localparam [63:0] inst_SRA   = 0x0000_0000_0000_0080;

// localparam [63:0] inst_SLT   = 0x0000_0000_0000_0100;
// localparam [63:0] inst_SLTU  = 0x0000_0000_0000_0200;
// localparam [63:0] inst_ADDI  = 0x0000_0000_0000_0400;
// localparam [63:0] inst_XORI  = 0x0000_0000_0000_0800;

// localparam [63:0] inst_ORI   = 0x0000_0000_0000_1000;
// localparam [63:0] inst_ANDI  = 0x0000_0000_0000_2000;
// localparam [63:0] inst_SLLI  = 0x0000_0000_0000_4000;
// localparam [63:0] inst_SRLI  = 0x0000_0000_0000_8000;

// localparam [63:0] inst_SRAI  = 0x0000_0000_0001_0000;
// localparam [63:0] inst_SLTI  = 0x0000_0000_0002_0000;
// localparam [63:0] inst_SLTIU = 0x0000_0000_0004_0000;
// localparam [63:0] inst_LB    = 0x0000_0000_0008_0000;

// localparam [63:0] inst_LH    = 0x0000_0000_0010_0000;
// localparam [63:0] inst_LW    = 0x0000_0000_0020_0000;
// localparam [63:0] inst_LBU   = 0x0000_0000_0040_0000;
// localparam [63:0] inst_LHU   = 0x0000_0000_0080_0000;

// localparam [63:0] inst_SB    = 0x0000_0000_0100_0000;
// localparam [63:0] inst_SH    = 0x0000_0000_0200_0000;
// localparam [63:0] inst_SW    = 0x0000_0000_0400_0000;
// localparam [63:0] inst_BEQ   = 0x0000_0000_0800_0000;

// localparam [63:0] inst_BNE   = 0x0000_0000_1000_0000;
// localparam [63:0] inst_BLT   = 0x0000_0000_2000_0000;
// localparam [63:0] inst_BGE   = 0x0000_0000_4000_0000;
// localparam [63:0] inst_BLTU  = 0x0000_0000_8000_0000;

// localparam [63:0] inst_BGEU  = 0x0000_0001_0000_0000;
// localparam [63:0] inst_JAL   = 0x0000_0002_0000_0000;
// localparam [63:0] inst_JALR  = 0x0000_0004_0000_0000;
// localparam [63:0] inst_LUI   = 0x0000_0008_0000_0000;

// localparam [63:0] inst_AUIPC = 0x0000_0010_0000_0000;
// localparam [63:0] inst_ECALL = 0x0000_0020_0000_0000;
// localparam [63:0] inst_EBREAK= 0x0000_0040_0000_0000;


// assign fun3   = instruction[14:12];
// assign fun3   = instruction[31:26];
// assign rd     = instruction[11:7];
// assign rs1    = instruction[19:15];
// assign rs2    = instruction[24:20];


// wire isAlu_R       =  (opcode == R_Type);
// wire isAlu_I       =  (opcode == ALU_I);
// wire isStore        = (opcode == STORE);
// wire isBranch       = (opcode == BRANCH);
// wire isJal          = (opcode == JAL);

// wire isLoad         = (opcode == LOAD);
// wire isLui          = (opcode == LUI);
// wire isAuipc        = (opcode == AUIPC);
// wire isEcall        = (opcode == ECALL);
// wire isJalr         = (opcode == JALR);
// wire isMret         = isEcall & (IMM_R == 32'h302);
// wire isNoop         = (instruction == NOOP);
// wire [31:0] SHAMT   = { 25'b0, instruction[24:20] };
// wire [31:0] CSR     = { 20'b0, instruction[31:20] };

