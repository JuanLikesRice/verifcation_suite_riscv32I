#!/usr/bin/env python3
import argparse, sys, os, re

BEGIN = "// === BEGIN AUTOGEN (do not edit) ==="
END   = "// === END AUTOGEN ==="

def p2i(s): return int(s, 0)
def w2b(w): return int(w) * 4

LD_TMPL = """SEARCH_DIR(.)
__DYNAMIC = 0;

MEMORY
{{
    instrram   : ORIGIN = 0x{instr_origin:08X}, LENGTH = {instr_len}
    rom        : ORIGIN = 0x{rom_origin:08X},    LENGTH = {rom_len}
    peripheral : ORIGIN = 0x{peri_origin:08X},   LENGTH = {peri_len}
    dataram    : ORIGIN = 0x{data_origin:08X},   LENGTH = {data_len}
}}

_min_stack   = 0x{stack_bytes:X};
_stack_len   = {stack_bytes};
_stack_start = ORIGIN(dataram) + LENGTH(dataram);

SECTIONS
{{
    .text : {{ . = ALIGN(4); _stext = .; *(.text) _etext = .; }} > instrram
    .rodata : {{ . = ALIGN(4); *(.rodata*) }} > rom
    .data : {{ . = ALIGN(4); _sdata = .; *(.data*) _edata = .; }} > dataram
    .bss : {{ . = ALIGN(4); _bss_start = .; *(.bss*) *(COMMON) _bss_end = .; }} > dataram
    .stack (NOLOAD) : {{ . = ALIGN(4); . = . + _min_stack; _stack = .; }} > dataram
    _end = .;
}}
"""

def gen_autogen_block(instr_origin, instr_len, rom_origin, rom_len, peri_origin, peri_len, data_origin, data_len):
    return f"""{BEGIN}
/* Auto-generated. This block will be overwritten by gen_linker.py */

#define INSTR_ORIGIN       0x{instr_origin:08X}u
#define ROM_ORIGIN         0x{rom_origin:08X}u
#define PERIPHERAL_ORIGIN  0x{peri_origin:08X}u
#define DATARAM_ORIGIN     0x{data_origin:08X}u

#define INSTR_LENGTH_BYTES {instr_len}u
#define ROM_LENGTH_BYTES   {rom_len}u
#define PERI_LENGTH_BYTES  {peri_len}u
#define DATA_LENGTH_BYTES  {data_len}u

#define PERIPHERAL_SUCCESS PERIPHERAL_ORIGIN
{END}
"""

def update_header(path, autogen_text):
    if os.path.exists(path):
        with open(path, "r") as f: cur = f.read()
        if BEGIN in cur and END in cur:
            new = re.sub(re.escape(BEGIN) + r".*?" + re.escape(END),
                         autogen_text, cur, flags=re.S)
        else:
            new = cur.rstrip() + "\n\n" + autogen_text + "\n"
    else:
        os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
        new = (
            "#ifndef CONSTANTS_H\n#define CONSTANTS_H\n\n"
            "// Manual section here...\n\n"
            + autogen_text +
            "\n\n#endif\n"
        )
    with open(path, "w") as f: f.write(new)

def gen_verilog(path, instr_origin, instr_len, rom_origin, rom_len, peri_origin, peri_len, data_origin, data_len):
    txt = f"""// Auto-generated by gen_linker.py
// Memory map parameters

localparam ADR_IMEM_START = 32'h{instr_origin:08X};
localparam ADR_PMEM_START = 32'h{peri_origin:08X};
localparam ADR_DMEM_START = 32'h{data_origin:08X};

localparam ADR_IMEM_SIZE  = {instr_len};
localparam ADR_PMEM_SIZE  = {peri_len};
localparam ADR_DMEM_SIZE  = {data_len};
"""
    os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
    with open(path, "w") as f: f.write(txt)

def main():
    ap = argparse.ArgumentParser(description="Generate link.ld, constants.h, and memory_map.vh")
    ap.add_argument("--start", required=True)
    ap.add_argument("--instr-words", type=p2i, required=True)
    ap.add_argument("--rom-words",   type=p2i, required=True)
    ap.add_argument("--peri-words",  type=p2i, required=True)
    ap.add_argument("--data-words",  type=p2i, required=True)
    ap.add_argument("--stack-words", type=p2i, required=True)
    ap.add_argument("--out-ld", default="link.ld")
    ap.add_argument("--out-h",  default="include/constants.h")
    ap.add_argument("--out-v",  default="rtl/memory_map.vh")
    args = ap.parse_args()

    start        = p2i(args.start)
    instr_len    = w2b(args.instr_words)
    rom_len      = w2b(args.rom_words)
    peri_len     = w2b(args.peri_words)
    data_len     = w2b(args.data_words)
    stack_bytes  = w2b(args.stack_words)

    instr_origin = start
    rom_origin   = instr_origin + instr_len
    peri_origin  = rom_origin   + rom_len
    data_origin  = peri_origin  + peri_len

    if any(x % 4 for x in [instr_origin, rom_origin, peri_origin, data_origin]):
        print("Error: origins must be 4-byte aligned.", file=sys.stderr); sys.exit(1)

    # Write link.ld
    with open(args.out_ld, "w") as f:
        f.write(LD_TMPL.format(
            instr_origin=instr_origin, instr_len=instr_len,
            rom_origin=rom_origin, rom_len=rom_len,
            peri_origin=peri_origin, peri_len=peri_len,
            data_origin=data_origin, data_len=data_len,
            stack_bytes=stack_bytes
        ))

    # Update header
    autogen = gen_autogen_block(instr_origin, instr_len, rom_origin, rom_len,
                                peri_origin, peri_len, data_origin, data_len)
    update_header(args.out_h, autogen)

    # Generate Verilog params
    gen_verilog(args.out_v, instr_origin, instr_len, rom_origin, rom_len,
                peri_origin, peri_len, data_origin, data_len)

if __name__ == "__main__":
    main()
